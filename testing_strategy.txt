Automated Testing Strategy

As the final build of our program uses a GUI fully operated by the use of a mouse, automated testing of this program would require a plugin or software that records the mouse-click events, duplicating the activation of buttons in exact order, and supplies proper user input. This testing strategy will outline the order in which testing the full functionality of the program should be carried out, supplying a brief description of the process. Automated testing should also be able to detect the display of the GUI.

Each test the automation runs should be linked to a Boolean value that returns true if the 
function runs successfully and false otherwise to allow us to locate which functions failed.

	1. Testing User Creation: The automation should navigate to the “File” drop down menu of the GUI and select “Create user”. Short, randomly generated strings should be used to fill input fields required to create the testing account. These credentials should be saved to instance variables within the automation for later use in testing and for reference in the test report.
	2. Verify the Creation of the Account: The automation should run listSongs(name, password) on the testing account to confirm that the account has been created and exists on the cloud server. If the server returns a Bad Credentials error, than account creation has failed and the test should return false.
	3. Testing the Log in function: The automation should navigate to the “File” drop-down menu of the GUI and select “Log in”. The credentials of the testing account previously saved to instance variables should be used to log into the account. If the program returns a message saying that the log in was successful, the test should return true. 
	4. Testing the Display of Available Songs from the Cloud: The automation should now detect that the GUI’s panels are displaying the list of songs available from the cloud server. If the GUI is unable to display the list of available songs after log in then the automation should return false. This could mean that the function within the program of receiving or parsing information returned from the server is broken or it could indicate a bug in the GUI.
	5. Testing the Download Song function: The automation should randomly select five songs to download from the cloud server and carry them out through simulated mouse-clicks on the GUI. The automation should then save a list of the server IDs of the songs downloaded in an instance variable.
	6. Testing Play functionality: The automation should begin playing the song. If the play function in the code is run, then the test should return true.
	7. Testing Stop functionality: If the Play functionality test is successful, the automation should attempt to stop the song via the stop button on the GUI. If the stop function in the program is run, then the test should return true.
	8. Testing Pause functionality: If the Play functionality test returns true, the automation should pause the song after several seconds of play. The time at which the pause occurs in the duration of the song should be saved in an instance variable for further testing. If this function fails, the song should be stopped.
	9. Testing Resume functionality: If the Pause functionality testing is successful, the automation should now simulate the pushing of the play button in order to resume the song from the previously paused position. The time in the duration of the song where the song begins to play again should be saved as an instance variable and compared with the time when the song was paused. The song should then be stopped.
	10. Testing Next song functionality: The automation should simulate the clicking of the Next button on the GUI. If the program begins to play another Song object then the test should return true.
	11. Testing Previous song functionality: The automation should simulate the clicking of the Previous button on the GUI. This should be done after a song has been played fully or the Next button has been pressed, otherwise this will just reset playback to the beginning of the song. If the program begins to play the song that was playing before the current song then the test should return true and playback should stop.
	12. Testing Shuffle functionality: The automation should turn toggle the Shuffle button on the GUI to turn it on. The automation should then begin playing a song and move to the next. If the next song played is not the next song in the list then the test should return true. If the next song played is the next song on the list then the automation should return false and repeat this test. If, after three consecutive failures, the program continues to fail, then the test should not be repeated and return false.
	13. Testing Create Playlist functionality: The automation should navigate to the playlist panel of the program and simulate the actions to create a playlist. A short, randomly generated string should be used to name the playlist and saved as an instance variable for further testing.
	14. Testing Add Song to Playlist functionality: The automation should add the songs in the user’s library to the playlist. If Song objects have been added to the ArrayList<Song> of the test Playlist object then the test should return true. The ArrayList<Song> object of the test playlist should be duplicated and saved as an instance variable by the automation for further testing. 
	15. Testing Remove Songs from Playlist functionality: The automation should remove a random song from the test playlist. The server ID of this song should be saved as an instance variable. The automation should then check if the ArrayList<Song> object of the test playlist still contains a Song object with the same server ID. If it does not, the test should return true. If it does, the test should return false.
	16. Testing Playback functionality from Playlists: The automation should simulate the selection of the playlist library as the library to play from on the GUI. It should then repeat the tests for Play, Stop, Pause, Resume, Next Song and Previous Song functionality.
	17. Testing Log out functionality: The automation should navigate to the “File” drop down menu of the GUI and select “Log out”. If the program no longer displays any song information or lists of available songs then the function is successful and the test should return true.
	18. As part of the Tear Down process of the testing, the automation should exit the program.

Additional functions that would be useful to automated testing would have been:
	- A function to check the existence of a user account on the server. This would prevent us from having to use the listSong(email, password) function inappropriately
	- A function to delete an account from the server. This function would be useful as part of the tear-down process of automated testing. As this function does not exist, we're required to create a new account every time we wish to test the account creation functionality. This leaves a slew of unused dummy accounts cluttering the server. Being able to delete an account lets us create an account during testing and delete it afterwards so that the testing account only exists temporarily
